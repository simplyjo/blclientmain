{"version":3,"file":"static/js/3424.7b119674.chunk.js","mappings":"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","sources":["../node_modules/@thirdweb-dev/sdk/dist/edition-43f118ae.browser.esm.js","../node_modules/@thirdweb-dev/sdk/dist/erc-1155-standard-abe3c512.browser.esm.js"],"sourcesContent":["import { dG as NFT_BASE_CONTRACT_ROLES, ds as ContractWrapper, e as AbiSchema, ah as ContractMetadata, dI as TokenErc1155ContractSchema, b0 as ContractAppURI, ai as ContractRoles, aj as ContractRoyalty, ak as ContractPrimarySale, ag as ContractEncoder, aQ as GasCostEstimator, aR as ContractEvents, aT as ContractPlatformFee, aS as ContractInterceptor, aM as Erc1155SignatureMintable, aV as ContractOwner, bI as getRoleHash, dt as buildTransactionFunction, aW as Transaction } from './contract-publisher-f8af509d.browser.esm.js';\nimport { S as StandardErc1155 } from './erc-1155-standard-abe3c512.browser.esm.js';\nimport { constants } from 'ethers';\nimport './QueryParams-39bcad7a.browser.esm.js';\nimport 'bn.js';\nimport 'zod';\nimport '@thirdweb-dev/storage';\nimport 'tiny-invariant';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport 'merkletreejs';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport 'fast-deep-equal';\nimport 'uuid';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC165.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedRevealDeprecated.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IThirdwebContract.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport '@thirdweb-dev/chains';\nimport 'bs58';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryLogic.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Permit.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721AQueryableUpgradeable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/SharedMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/zora_IERC721Drop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILoyaltyCard.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/INFTMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountFactory.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccount.json';\nimport 'ethers/lib/utils';\nimport '@thirdweb-dev/contracts-js/dist/abis/Forwarder.json';\nimport 'cross-fetch';\nimport '@thirdweb-dev/contracts-js/dist/abis/ContractPublisher.json';\nimport 'eventemitter3';\n\n/**\n * Create a collection of NFTs that lets you mint multiple copies of each NFT.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"edition\");\n * ```\n *\n * @public\n */\nclass Edition extends StandardErc1155 {\n  static contractRoles = NFT_BASE_CONTRACT_ROLES;\n\n  /**\n   * Configure royalties\n   * @remarks Set your own royalties for the entire contract or per token\n   * @example\n   * ```javascript\n   * // royalties on the whole contract\n   * contract.royalties.setDefaultRoyaltyInfo({\n   *   seller_fee_basis_points: 100, // 1%\n   *   fee_recipient: \"0x...\"\n   * });\n   * // override royalty for a particular token\n   * contract.royalties.setTokenRoyaltyInfo(tokenId, {\n   *   seller_fee_basis_points: 500, // 5%\n   *   fee_recipient: \"0x...\"\n   * });\n   * ```\n   */\n\n  /**\n   * Signature Minting\n   * @remarks Generate dynamic NFTs with your own signature, and let others mint them using that signature.\n   * @example\n   * ```javascript\n   * // see how to craft a payload to sign in the `contract.signature.generate()` documentation\n   * const signedPayload = contract.signature.generate(payload);\n   *\n   * // now anyone can mint the NFT\n   * const tx = contract.signature.mint(signedPayload);\n   * const receipt = tx.receipt; // the mint transaction receipt\n   * const mintedId = tx.id; // the id of the NFT minted\n   * ```\n   */\n\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options, storage);\n    super(contractWrapper, storage, chainId);\n    this.abi = AbiSchema.parse(abi || []);\n    this.metadata = new ContractMetadata(this.contractWrapper, TokenErc1155ContractSchema, this.storage);\n    this.app = new ContractAppURI(this.contractWrapper, this.metadata, this.storage);\n    this.roles = new ContractRoles(this.contractWrapper, Edition.contractRoles);\n    this.royalties = new ContractRoyalty(this.contractWrapper, this.metadata);\n    this.sales = new ContractPrimarySale(this.contractWrapper);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.platformFees = new ContractPlatformFee(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.signature = new Erc1155SignatureMintable(this.contractWrapper, this.storage, this.roles);\n    this.owner = new ContractOwner(this.contractWrapper);\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get all NFTs\n   *\n   * @remarks Get all the data associated with every NFT in this contract.\n   *\n   * By default, returns the first 100 NFTs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const nfts = await contract.getAll();\n   * ```\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs queried.\n   */\n  async getAll(queryParams) {\n    return this.erc1155.getAll(queryParams);\n  }\n\n  /**\n   * Get all NFTs owned by a specific wallet\n   *\n   * @remarks Get all the data associated with the NFTs owned by a specific wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to get the NFTs of\n   * const address = \"{{wallet_address}}\";\n   * const nfts = await contract.getOwned(address);\n   * ```\n   *\n   * @returns The NFT metadata for all NFTs in the contract.\n   */\n  async getOwned(walletAddress) {\n    return this.erc1155.getOwned(walletAddress);\n  }\n\n  /**\n   * Get the number of NFTs minted\n   * @returns the total number of NFTs minted in this contract\n   * @public\n   */\n  async getTotalCount() {\n    return this.erc1155.totalCount();\n  }\n\n  /**\n   * Get whether users can transfer NFTs from this contract\n   */\n  async isTransferRestricted() {\n    const anyoneCanTransfer = await this.contractWrapper.readContract.hasRole(getRoleHash(\"transfer\"), constants.AddressZero);\n    return !anyoneCanTransfer;\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Mint NFT for the connected wallet\n   *\n   * @remarks See {@link Edition.mintTo}\n   */\n  mint = /* @__PURE__ */buildTransactionFunction(async metadataWithSupply => {\n    return this.erc1155.mint.prepare(metadataWithSupply);\n  });\n\n  /**\n   * Mint an NFT with a limited supply\n   *\n   * @remarks Mint an NFT with a limited supply to a specified wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to mint the NFT to\n   * const toAddress = \"{{wallet_address}}\"\n   *\n   * // Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\n   * const metadata = {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }\n   *\n   * const metadataWithSupply = {\n   *   metadata,\n   *   supply: 1000, // The number of this NFT you want to mint\n   * }\n   *\n   * const tx = await contract.mintTo(toAddress, metadataWithSupply);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const tokenId = tx.id; // the id of the NFT minted\n   * const nft = await tx.data(); // (optional) fetch details of minted NFT\n   * ```\n   */\n  mintTo = /* @__PURE__ */buildTransactionFunction(async (to, metadataWithSupply) => {\n    return this.erc1155.mintTo.prepare(to, metadataWithSupply);\n  });\n\n  /**\n   * Construct a mint transaction without executing it.\n   * This is useful for estimating the gas cost of a mint transaction, overriding transaction options and having fine grained control over the transaction execution.\n   * @param receiver - Address you want to send the token to\n   * @param metadataWithSupply - The metadata of the NFT you want to mint\n   *\n   * @deprecated `contract.mint.prepare(...args)`\n   */\n  async getMintTransaction(receiver, metadataWithSupply) {\n    return this.erc1155.getMintTransaction(receiver, metadataWithSupply);\n  }\n\n  /**\n   * Increase the supply of an existing NFT and mint it to the connected wallet\n   *\n   * @param tokenId - the token id of the NFT to increase supply of\n   * @param additionalSupply - the additional amount to mint\n   */\n  mintAdditionalSupply = /* @__PURE__ */buildTransactionFunction(async (tokenId, additionalSupply) => {\n    return this.erc1155.mintAdditionalSupply.prepare(tokenId, additionalSupply);\n  });\n\n  /**\n   * Increase the supply of an existing NFT and mint it to a given wallet address\n   *\n   * @param to - the address to mint to\n   * @param tokenId - the token id of the NFT to increase supply of\n   * @param additionalSupply - the additional amount to mint\n   */\n  mintAdditionalSupplyTo = /* @__PURE__ */buildTransactionFunction(async (to, tokenId, additionalSupply) => {\n    return this.erc1155.mintAdditionalSupplyTo.prepare(to, tokenId, additionalSupply);\n  });\n\n  /**\n   * Mint Many NFTs for the connected wallet\n   *\n   * @remarks See {@link Edition.mintBatchTo}\n   */\n  mintBatch = /* @__PURE__ */buildTransactionFunction(async metadatas => {\n    return this.erc1155.mintBatch.prepare(metadatas);\n  });\n\n  /**\n   * Mint Many NFTs with limited supplies\n   *\n   * @remarks Mint many different NFTs with limited supplies to a specified wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to mint the NFT to\n   * const toAddress = \"{{wallet_address}}\"\n   *\n   * // Custom metadata and supplies of your NFTs\n   * const metadataWithSupply = [{\n   *   supply: 50, // The number of this NFT you want to mint\n   *   metadata: {\n   *     name: \"Cool NFT #1\",\n   *     description: \"This is a cool NFT\",\n   *     image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   *   },\n   * }, {\n   *   supply: 100,\n   *   metadata: {\n   *     name: \"Cool NFT #2\",\n   *     description: \"This is a cool NFT\",\n   *     image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   *   },\n   * }];\n   *\n   * const tx = await contract.mintBatchTo(toAddress, metadataWithSupply);\n   * const receipt = tx[0].receipt; // same transaction receipt for all minted NFTs\n   * const firstTokenId = tx[0].id; // token id of the first minted NFT\n   * const firstNFT = await tx[0].data(); // (optional) fetch details of the first minted NFT\n   * ```\n   */\n  mintBatchTo = /* @__PURE__ */buildTransactionFunction(async (to, metadataWithSupply) => {\n    return this.erc1155.mintBatchTo.prepare(to, metadataWithSupply);\n  });\n\n  /**\n   * Burn a specified amount of a NFT\n   *\n   * @param tokenId - the token Id to burn\n   * @param amount - amount to burn\n   *\n   * @example\n   * ```javascript\n   * const result = await contract.burnTokens(tokenId, amount);\n   * ```\n   */\n  burn = /* @__PURE__ */buildTransactionFunction(async (tokenId, amount) => {\n    return this.erc1155.burn.prepare(tokenId, amount);\n  });\n\n  /**\n   * @internal\n   */\n  async prepare(method, args, overrides) {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method,\n      args,\n      overrides\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName, args, overrides) {\n    return this.contractWrapper.call(functionName, args, overrides);\n  }\n}\n\nexport { Edition };\n","import { aL as Erc1155, dt as buildTransactionFunction } from './contract-publisher-f8af509d.browser.esm.js';\n\n/**\n * Standard ERC1155 NFT functions\n * @remarks Basic functionality for a ERC1155 contract that handles IPFS storage for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.edition.transfer(walletAddress, tokenId, quantity);\n * ```\n * @public\n */\nclass StandardErc1155 {\n  get chainId() {\n    return this._chainId;\n  }\n  constructor(contractWrapper, storage, chainId) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.erc1155 = new Erc1155(this.contractWrapper, this.storage, chainId);\n    this._chainId = chainId;\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.readContract.address;\n  }\n\n  ////// Standard ERC1155 functions //////\n\n  /**\n   * Get a single NFT\n   *\n   * @example\n   * ```javascript\n   * const nft = await contract.get(\"0\");\n   * ```\n   * @param tokenId - the tokenId of the NFT to retrieve\n   * @returns The NFT metadata\n   */\n  async get(tokenId) {\n    return this.erc1155.get(tokenId);\n  }\n\n  /**\n   * Returns the total supply of a specific token\n   * @param tokenId - The token ID to get the total supply of\n   * @returns the total supply\n   */\n  async totalSupply(tokenId) {\n    return this.erc1155.totalSupply(tokenId);\n  }\n\n  /**\n   * Get NFT Balance\n   *\n   * @remarks Get a wallets NFT balance (number of NFTs in this contract owned by the wallet).\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to check NFT balance\n   * const walletAddress = \"{{wallet_address}}\";\n   * const tokenId = 0; // Id of the NFT to check\n   * const balance = await contract.balanceOf(walletAddress, tokenId);\n   * ```\n   */\n  async balanceOf(address, tokenId) {\n    return this.erc1155.balanceOf(address, tokenId);\n  }\n\n  /**\n   * Get NFT Balance for the currently connected wallet\n   */\n  async balance(tokenId) {\n    return this.erc1155.balance(tokenId);\n  }\n\n  /**\n   * Get whether this wallet has approved transfers from the given operator\n   * @param address - the wallet address\n   * @param operator - the operator address\n   */\n  async isApproved(address, operator) {\n    return this.erc1155.isApproved(address, operator);\n  }\n\n  /**\n   * Transfer an NFT\n   *\n   * @remarks Transfer an NFT from the connected wallet to another wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to send the NFT to\n   * const toAddress = \"{{wallet_address}}\";\n   * const tokenId = \"0\"; // The token ID of the NFT you want to send\n   * const amount = 3; // How many copies of the NFTs to transfer\n   * await contract.transfer(toAddress, tokenId, amount);\n   * ```\n   */\n  transfer = /* @__PURE__ */buildTransactionFunction((() => {\n    var _this = this;\n    return async function (to, tokenId, amount) {\n      let data = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [0];\n      return _this.erc1155.transfer.prepare(to, tokenId, amount, data);\n    };\n  })());\n\n  /**\n   * Approve or remove operator as an operator for the caller. Operators can call transferFrom or safeTransferFrom for any token owned by the caller.\n   * @param operator - the operator's address\n   * @param approved - whether to approve or remove\n   *\n   * @internal\n   */\n  setApprovalForAll = /* @__PURE__ */buildTransactionFunction(async (operator, approved) => {\n    return this.erc1155.setApprovalForAll.prepare(operator, approved);\n  });\n\n  /**\n   * Airdrop multiple NFTs\n   *\n   * @remarks Airdrop one or multiple NFTs to the provided wallet addresses.\n   * @twfeature ERC1155\n   * @example\n   * ```javascript\n   * // The token ID of the NFT you want to airdrop\n   * const tokenId = \"0\";\n   * // Array of objects of addresses and quantities to airdrop NFTs to\n   * const addresses = [\n   *  {\n   *    address: \"0x...\",\n   *    quantity: 2,\n   *  },\n   *  {\n   *   address: \"0x...\",\n   *    quantity: 3,\n   *  },\n   * ];\n   * await contract.airdrop(tokenId, addresses);\n   *\n   * // You can also pass an array of addresses, it will airdrop 1 NFT per address\n   * const tokenId = \"0\";\n   * const addresses = [\n   *  \"0x...\", \"0x...\", \"0x...\",\n   * ]\n   * await contract.airdrop(tokenId, addresses);\n   * ```\n   */\n  airdrop = /* @__PURE__ */buildTransactionFunction((() => {\n    var _this2 = this;\n    return async function (tokenId, addresses) {\n      let data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [0];\n      return _this2.erc1155.airdrop.prepare(tokenId, addresses, data);\n    };\n  })());\n}\n\nexport { StandardErc1155 as S };\n"],"names":["Edition","StandardErc1155","constructor","network","address","storage","options","arguments","length","undefined","abi","chainId","super","ContractWrapper","_defineProperty","buildTransactionFunction","async","this","erc1155","mint","prepare","metadataWithSupply","to","mintTo","tokenId","additionalSupply","mintAdditionalSupply","mintAdditionalSupplyTo","mintBatch","metadatas","mintBatchTo","amount","burn","AbiSchema","parse","metadata","ContractMetadata","contractWrapper","TokenErc1155ContractSchema","app","ContractAppURI","roles","ContractRoles","contractRoles","royalties","ContractRoyalty","sales","ContractPrimarySale","encoder","ContractEncoder","estimator","GasCostEstimator","events","ContractEvents","platformFees","ContractPlatformFee","interceptor","ContractInterceptor","signature","Erc1155SignatureMintable","owner","ContractOwner","onNetworkUpdated","updateSignerOrProvider","getAddress","readContract","getAll","queryParams","getOwned","walletAddress","getTotalCount","totalCount","isTransferRestricted","hasRole","getRoleHash","constants","getMintTransaction","receiver","method","args","overrides","Transaction","fromContractWrapper","call","functionName","NFT_BASE_CONTRACT_ROLES","_chainId","_this","data","transfer","operator","approved","setApprovalForAll","_this2","addresses","airdrop","Erc1155","get","totalSupply","balanceOf","balance","isApproved"],"sourceRoot":""}