"use strict";(self.webpackChunkblastarians=self.webpackChunkblastarians||[]).push([[1301],{51301:(t,e,i)=>{i.d(e,{RainbowConnector:()=>d});var s=i(17370),n=i(61921),c=i(61766),o=i(97144),a=i(93635),h=i(48987),r=i(57865),u=(i(73026),new WeakMap);class d extends a.s{constructor(t){const e={...{name:"Rainbow Wallet",shimDisconnect:!0,shimChainChangedDisconnect:!0,getProvider:r.g},...t.options};super({chains:t.chains,options:e,connectorStorage:t.connectorStorage}),(0,n._)(this,"id",o.w.rainbow),(0,s._)(this,u,{writable:!0,value:void 0}),(0,s.a)(this,u,e.UNSTABLE_shimOnConnectSelectAccount)}async connect(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};try{var e,i;const a=await this.getProvider();if(!a)throw new c.a;this.setupListeners(),this.emit("message",{type:"connecting"});let r=null;if((0,s.b)(this,u)&&null!==(e=this.options)&&void 0!==e&&e.shimDisconnect&&!Boolean(this.connectorStorage.getItem(this.shimDisconnectKey))){r=await this.getAccount().catch((()=>null));if(!!r)try{await a.request({method:"wallet_requestPermissions",params:[{eth_accounts:{}}]})}catch(n){if(this.isUserRejectedRequestError(n))throw new c.U(n)}}if(!r){const t=await a.request({method:"eth_requestAccounts"});r=h.getAddress(t[0])}let d=await this.getChainId(),w=this.isChainUnsupported(d);if(t.chainId&&d!==t.chainId)try{await this.switchChain(t.chainId),d=t.chainId,w=this.isChainUnsupported(t.chainId)}catch(o){console.error("Could not switch to chain id : ".concat(t.chainId),o)}null!==(i=this.options)&&void 0!==i&&i.shimDisconnect&&await this.connectorStorage.setItem(this.shimDisconnectKey,"true");const l={chain:{id:d,unsupported:w},provider:a,account:r};return this.emit("connect",l),l}catch(n){if(this.isUserRejectedRequestError(n))throw new c.U(n);if(-32002===n.code)throw new c.R(n);throw n}}async switchAccount(){const t=await this.getProvider();await t.request({method:"wallet_requestPermissions",params:[{eth_accounts:{}}]})}}}}]);
//# sourceMappingURL=1301.e007ace1.chunk.js.map