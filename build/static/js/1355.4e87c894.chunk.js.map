{"version":3,"file":"static/js/1355.4e87c894.chunk.js","mappings":"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","sources":["../node_modules/@thirdweb-dev/sdk/dist/erc-721-standard-7b47bd46.browser.esm.js","../node_modules/@thirdweb-dev/sdk/dist/hasERC20Allowance-72268bf5.browser.esm.js","../node_modules/@thirdweb-dev/sdk/dist/multiwrap-4d53c8a1.browser.esm.js"],"sourcesContent":["import { aD as Erc721, cG as resolveAddress, dt as buildTransactionFunction, aW as Transaction } from './contract-publisher-f8af509d.browser.esm.js';\n\n/**\n * Standard ERC721 NFT functions\n * @remarks Basic functionality for a ERC721 contract that handles IPFS storage for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.nft.transfer(walletAddress, tokenId);\n * ```\n * @public\n */\nclass StandardErc721 {\n  get chainId() {\n    return this._chainId;\n  }\n  constructor(contractWrapper, storage, chainId) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.erc721 = new Erc721(this.contractWrapper, this.storage, chainId);\n    this._chainId = chainId;\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /**\n   * Get all NFTs\n   *\n   * @remarks Get all the data associated with every NFT in this contract.\n   *\n   * By default, returns the first 100 NFTs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const nfts = await contract.getAll();\n   * console.log(nfts);\n   * ```\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs queried.\n   */\n  async getAll(queryParams) {\n    return this.erc721.getAll(queryParams);\n  }\n\n  /**\n   * Get all NFTs owned by a specific wallet\n   *\n   * @remarks Get all the data associated with the NFTs owned by a specific wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to get the NFTs of\n   * const address = \"{{wallet_address}}\";\n   * const nfts = await contract.getOwned(address);\n   * console.log(nfts);\n   * ```\n   * @param walletAddress - the wallet address to query, defaults to the connected wallet\n   * @returns The NFT metadata for all NFTs in the contract.\n   */\n  async getOwned(walletAddress) {\n    if (walletAddress) {\n      walletAddress = await resolveAddress(walletAddress);\n    }\n    return this.erc721.getOwned(walletAddress);\n  }\n\n  /**\n   * Get Owned Token Ids\n   * @remarks Get all the token ids of NFTs owned by a specific wallet (no metadata)\n   */\n  async getOwnedTokenIds(walletAddress) {\n    if (walletAddress) {\n      walletAddress = await resolveAddress(walletAddress);\n    }\n    return this.erc721.getOwnedTokenIds(walletAddress);\n  }\n\n  /**\n   * Get total minted supply count\n   */\n  async totalSupply() {\n    return this.erc721.totalCirculatingSupply();\n  }\n\n  /**\n   * Get a single NFT\n   *\n   * @example\n   * ```javascript\n   * const tokenId = 0;\n   * const nft = await contract.get(tokenId);\n   * ```\n   * @param tokenId - the tokenId of the NFT to retrieve\n   * @returns The NFT metadata\n   */\n  async get(tokenId) {\n    return this.erc721.get(tokenId);\n  }\n\n  /**\n   * Get the current owner of a given NFT within this Contract\n   *\n   * @param tokenId - the tokenId of the NFT\n   * @returns the address of the owner\n   */\n  async ownerOf(tokenId) {\n    return this.erc721.ownerOf(tokenId);\n  }\n\n  /**\n   * Get NFT Balance\n   *\n   * @remarks Get a wallets NFT balance (number of NFTs in this contract owned by the wallet).\n   *\n   * @example\n   * ```javascript\n   * const walletAddress = \"{{wallet_address}}\";\n   * const balance = await contract.balanceOf(walletAddress);\n   * console.log(balance);\n   * ```\n   */\n  async balanceOf(address) {\n    return this.erc721.balanceOf(address);\n  }\n\n  /**\n   * Get NFT Balance for the currently connected wallet\n   */\n  async balance() {\n    return this.erc721.balance();\n  }\n\n  /**\n   * Get whether this wallet has approved transfers from the given operator\n   * @param address - the wallet address\n   * @param operator - the operator address\n   */\n  async isApproved(address, operator) {\n    return this.erc721.isApproved(address, operator);\n  }\n\n  /**\n   * Transfer an NFT\n   *\n   * @remarks Transfer an NFT from the connected wallet to another wallet.\n   *\n   * @example\n   * ```javascript\n   * const walletAddress = \"{{wallet_address}}\";\n   * const tokenId = 0;\n   * await contract.transfer(walletAddress, tokenId);\n   * ```\n   */\n  transfer = /* @__PURE__ */buildTransactionFunction(async (to, tokenId) => {\n    return this.erc721.transfer.prepare(to, tokenId);\n  });\n\n  /**\n   * Approve or remove operator as an operator for the caller. Operators can call transferFrom or safeTransferFrom for any token owned by the caller.\n   * @param operator - the operator's address\n   * @param approved - whether to approve or remove\n   *\n   * @internal\n   */\n  setApprovalForAll = /* @__PURE__ */buildTransactionFunction(async (operator, approved) => {\n    return this.erc721.setApprovalForAll.prepare(operator, approved);\n  });\n\n  /**\n   * Approve an operator for the NFT owner. Operators can call transferFrom or safeTransferFrom for the specified token.\n   * @param operator - the operator's address\n   * @param tokenId - the tokenId to give approval for\n   *\n   * @internal\n   */\n  setApprovalForToken = /* @__PURE__ */buildTransactionFunction(async (operator, tokenId) => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"approve\",\n      args: [await resolveAddress(operator), tokenId]\n    });\n  });\n}\n\nexport { StandardErc721 as S };\n","import ERC20Abi from '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport { ds as ContractWrapper } from './contract-publisher-f8af509d.browser.esm.js';\n\nasync function hasERC20Allowance(contractToApprove, currencyAddress, value) {\n  const provider = contractToApprove.getProvider();\n  const erc20 = new ContractWrapper(provider, currencyAddress, ERC20Abi, {}, contractToApprove.storage);\n  const owner = await contractToApprove.getSignerAddress();\n  const spender = contractToApprove.address;\n  const allowance = await erc20.read(\"allowance\", [owner, spender]);\n  return allowance.gte(value);\n}\n\nexport { hasERC20Allowance as h };\n","import { dO as MULTIWRAP_CONTRACT_ROLES, ds as ContractWrapper, e as AbiSchema, ah as ContractMetadata, dP as MultiwrapContractSchema, b0 as ContractAppURI, ai as ContractRoles, ag as ContractEncoder, aQ as GasCostEstimator, aR as ContractEvents, aj as ContractRoyalty, aV as ContractOwner, bb as fetchCurrencyMetadata, dt as buildTransactionFunction, ba as normalizePriceValue, dC as isTokenApprovedForTransfer, aW as Transaction, dQ as uploadOrExtractURI, cG as resolveAddress } from './contract-publisher-f8af509d.browser.esm.js';\nimport { S as StandardErc721 } from './erc-721-standard-7b47bd46.browser.esm.js';\nimport { utils } from 'ethers';\nimport { h as hasERC20Allowance } from './hasERC20Allowance-72268bf5.browser.esm.js';\nimport './QueryParams-39bcad7a.browser.esm.js';\nimport 'bn.js';\nimport 'zod';\nimport '@thirdweb-dev/storage';\nimport 'tiny-invariant';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport 'merkletreejs';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport 'fast-deep-equal';\nimport 'uuid';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC165.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedRevealDeprecated.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IThirdwebContract.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport '@thirdweb-dev/chains';\nimport 'bs58';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryLogic.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Permit.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721AQueryableUpgradeable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/SharedMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/zora_IERC721Drop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILoyaltyCard.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/INFTMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountFactory.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccount.json';\nimport 'ethers/lib/utils';\nimport '@thirdweb-dev/contracts-js/dist/abis/Forwarder.json';\nimport 'cross-fetch';\nimport '@thirdweb-dev/contracts-js/dist/abis/ContractPublisher.json';\nimport 'eventemitter3';\n\n/**\n * Multiwrap lets you wrap any number of ERC20, ERC721 and ERC1155 tokens you own into a single wrapped token bundle.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"multiwrap\");\n * ```\n *\n * @beta\n */\nclass Multiwrap extends StandardErc721 {\n  static contractRoles = MULTIWRAP_CONTRACT_ROLES;\n\n  /**\n   * Configure royalties\n   * @remarks Set your own royalties for the entire contract or per token\n   * @example\n   * ```javascript\n   * // royalties on the whole contract\n   * contract.royalties.setDefaultRoyaltyInfo({\n   *   seller_fee_basis_points: 100, // 1%\n   *   fee_recipient: \"0x...\"\n   * });\n   * // override royalty for a particular token\n   * contract.royalties.setTokenRoyaltyInfo(tokenId, {\n   *   seller_fee_basis_points: 500, // 5%\n   *   fee_recipient: \"0x...\"\n   * });\n   * ```\n   */\n\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options, storage);\n    super(contractWrapper, storage, chainId);\n    this.abi = AbiSchema.parse(abi || []);\n    this.metadata = new ContractMetadata(this.contractWrapper, MultiwrapContractSchema, this.storage);\n    this.app = new ContractAppURI(this.contractWrapper, this.metadata, this.storage);\n    this.roles = new ContractRoles(this.contractWrapper, Multiwrap.contractRoles);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.royalties = new ContractRoyalty(this.contractWrapper, this.metadata);\n    this.owner = new ContractOwner(this.contractWrapper);\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get the contents of a wrapped token bundle\n   * @example\n   * ```javascript\n   * const contents = await contract.getWrappedContents(wrappedTokenId);\n   * console.log(contents.erc20Tokens);\n   * console.log(contents.erc721Tokens);\n   * console.log(contents.erc1155Tokens);\n   * ```\n   * @param wrappedTokenId - the id of the wrapped token bundle\n   */\n  async getWrappedContents(wrappedTokenId) {\n    const wrappedTokens = await this.contractWrapper.readContract.getWrappedContents(wrappedTokenId);\n    const erc20Tokens = [];\n    const erc721Tokens = [];\n    const erc1155Tokens = [];\n    for (const token of wrappedTokens) {\n      switch (token.tokenType) {\n        case 0:\n          {\n            const tokenMetadata = await fetchCurrencyMetadata(this.contractWrapper.getProvider(), token.assetContract);\n            erc20Tokens.push({\n              contractAddress: token.assetContract,\n              quantity: utils.formatUnits(token.totalAmount, tokenMetadata.decimals)\n            });\n            break;\n          }\n        case 1:\n          {\n            erc721Tokens.push({\n              contractAddress: token.assetContract,\n              tokenId: token.tokenId\n            });\n            break;\n          }\n        case 2:\n          {\n            erc1155Tokens.push({\n              contractAddress: token.assetContract,\n              tokenId: token.tokenId,\n              quantity: token.totalAmount.toString()\n            });\n            break;\n          }\n      }\n    }\n    return {\n      erc20Tokens,\n      erc721Tokens,\n      erc1155Tokens\n    };\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Wrap any number of ERC20/ERC721/ERC1155 tokens into a single wrapped token\n   * @example\n   * ```javascript\n   * const tx = await contract.wrap({\n   *   erc20Tokens: [{\n   *     contractAddress: \"0x...\",\n   *     quantity: \"0.8\"\n   *   }],\n   *   erc721Tokens: [{\n   *     contractAddress: \"0x...\",\n   *     tokenId: \"0\"\n   *   }],\n   *   erc1155Tokens: [{\n   *     contractAddress: \"0x...\",\n   *     tokenId: \"1\",\n   *     quantity: \"2\"\n   *   }]\n   * }, {\n   *     name: \"Wrapped bundle\",\n   *     description: \"This is a wrapped bundle of tokens and NFTs\",\n   *     image: \"ipfs://...\",\n   * });\n   * const receipt = tx.receipt(); // the transaction receipt\n   * const wrappedTokenId = tx.id; // the id of the wrapped token bundle\n   * ```\n   * @param contents - the contents to wrap\n   * @param wrappedTokenMetadata - metadata to represent the wrapped token bundle\n   * @param recipientAddress - Optional. The address to send the wrapped token bundle to\n   */\n  wrap = /* @__PURE__ */buildTransactionFunction(async (contents, wrappedTokenMetadata, recipientAddress) => {\n    const uri = await uploadOrExtractURI(wrappedTokenMetadata, this.storage);\n    const recipient = await resolveAddress(recipientAddress ? recipientAddress : await this.contractWrapper.getSignerAddress());\n    const tokens = await this.toTokenStructList(contents);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"wrap\",\n      args: [tokens, uri, recipient],\n      parse: receipt => {\n        const event = this.contractWrapper.parseLogs(\"TokensWrapped\", receipt?.logs);\n        if (event.length === 0) {\n          throw new Error(\"TokensWrapped event not found\");\n        }\n        const tokenId = event[0].args.tokenIdOfWrappedToken;\n        return {\n          id: tokenId,\n          receipt,\n          data: () => this.get(tokenId)\n        };\n      }\n    });\n  });\n\n  /**\n   * Unwrap a wrapped token bundle, and retrieve its contents\n   * @example\n   * ```javascript\n   * await contract.unwrap(wrappedTokenId);\n   * ```\n   * @param wrappedTokenId - the id of the wrapped token bundle\n   * @param recipientAddress - Optional. The address to send the unwrapped tokens to\n   */\n  unwrap = /* @__PURE__ */buildTransactionFunction(async (wrappedTokenId, recipientAddress) => {\n    const recipient = await resolveAddress(recipientAddress ? recipientAddress : await this.contractWrapper.getSignerAddress());\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"unwrap\",\n      args: [wrappedTokenId, recipient]\n    });\n  });\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  async toTokenStructList(contents) {\n    const tokens = [];\n    const provider = this.contractWrapper.getProvider();\n    const owner = await this.contractWrapper.getSignerAddress();\n    if (contents.erc20Tokens) {\n      for (const erc20 of contents.erc20Tokens) {\n        const normalizedQuantity = await normalizePriceValue(provider, erc20.quantity, erc20.contractAddress);\n        const hasAllowance = await hasERC20Allowance(this.contractWrapper, erc20.contractAddress, normalizedQuantity);\n        if (!hasAllowance) {\n          throw new Error(`ERC20 token with contract address \"${erc20.contractAddress}\" does not have enough allowance to transfer.\\n\\nYou can set allowance to the multiwrap contract to transfer these tokens by running:\\n\\nawait sdk.getToken(\"${erc20.contractAddress}\").setAllowance(\"${this.getAddress()}\", ${erc20.quantity});\\n\\n`);\n        }\n        tokens.push({\n          assetContract: erc20.contractAddress,\n          totalAmount: normalizedQuantity,\n          tokenId: 0,\n          tokenType: 0\n        });\n      }\n    }\n    if (contents.erc721Tokens) {\n      for (const erc721 of contents.erc721Tokens) {\n        const isApproved = await isTokenApprovedForTransfer(this.contractWrapper.getProvider(), this.getAddress(), erc721.contractAddress, erc721.tokenId, owner);\n        if (!isApproved) {\n          throw new Error(`ERC721 token \"${erc721.tokenId}\" with contract address \"${erc721.contractAddress}\" is not approved for transfer.\\n\\nYou can give approval the multiwrap contract to transfer this token by running:\\n\\nawait sdk.getNFTCollection(\"${erc721.contractAddress}\").setApprovalForToken(\"${this.getAddress()}\", ${erc721.tokenId});\\n\\n`);\n        }\n        tokens.push({\n          assetContract: erc721.contractAddress,\n          totalAmount: 0,\n          tokenId: erc721.tokenId,\n          tokenType: 1\n        });\n      }\n    }\n    if (contents.erc1155Tokens) {\n      for (const erc1155 of contents.erc1155Tokens) {\n        const isApproved = await isTokenApprovedForTransfer(this.contractWrapper.getProvider(), this.getAddress(), erc1155.contractAddress, erc1155.tokenId, owner);\n        if (!isApproved) {\n          throw new Error(`ERC1155 token \"${erc1155.tokenId}\" with contract address \"${erc1155.contractAddress}\" is not approved for transfer.\\n\\nYou can give approval the multiwrap contract to transfer this token by running:\\n\\nawait sdk.getEdition(\"${erc1155.contractAddress}\").setApprovalForAll(\"${this.getAddress()}\", true);\\n\\n`);\n        }\n        tokens.push({\n          assetContract: erc1155.contractAddress,\n          totalAmount: erc1155.quantity,\n          tokenId: erc1155.tokenId,\n          tokenType: 2\n        });\n      }\n    }\n    return tokens;\n  }\n\n  /**\n   * @internal\n   */\n  async prepare(method, args, overrides) {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method,\n      args,\n      overrides\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName, args, overrides) {\n    return this.contractWrapper.call(functionName, args, overrides);\n  }\n}\n\nexport { Multiwrap };\n"],"names":["StandardErc721","chainId","this","_chainId","constructor","contractWrapper","storage","_defineProperty","buildTransactionFunction","async","to","tokenId","erc721","transfer","prepare","operator","approved","setApprovalForAll","Transaction","fromContractWrapper","method","args","resolveAddress","Erc721","onNetworkUpdated","network","updateSignerOrProvider","getAddress","readContract","address","getAll","queryParams","getOwned","walletAddress","getOwnedTokenIds","totalSupply","totalCirculatingSupply","get","ownerOf","balanceOf","balance","isApproved","hasERC20Allowance","contractToApprove","currencyAddress","value","provider","getProvider","erc20","ContractWrapper","ERC20Abi","owner","getSignerAddress","spender","read","gte","Multiwrap","options","arguments","length","undefined","abi","super","contents","wrappedTokenMetadata","recipientAddress","uri","uploadOrExtractURI","recipient","tokens","toTokenStructList","parse","receipt","event","parseLogs","logs","Error","tokenIdOfWrappedToken","id","data","wrappedTokenId","AbiSchema","metadata","ContractMetadata","MultiwrapContractSchema","app","ContractAppURI","roles","ContractRoles","contractRoles","encoder","ContractEncoder","estimator","GasCostEstimator","events","ContractEvents","royalties","ContractRoyalty","ContractOwner","getWrappedContents","wrappedTokens","erc20Tokens","erc721Tokens","erc1155Tokens","token","tokenType","tokenMetadata","fetchCurrencyMetadata","assetContract","push","contractAddress","quantity","utils","totalAmount","decimals","toString","normalizedQuantity","normalizePriceValue","concat","isTokenApprovedForTransfer","erc1155","overrides","call","functionName","MULTIWRAP_CONTRACT_ROLES"],"sourceRoot":""}