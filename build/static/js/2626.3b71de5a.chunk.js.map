{"version":3,"file":"static/js/2626.3b71de5a.chunk.js","mappings":"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","sources":["../node_modules/@thirdweb-dev/sdk/dist/split-02ee60cf.browser.esm.js"],"sourcesContent":["import ERC20Abi from '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport { BigNumber, Contract } from 'ethers';\nimport { dW as ADMIN_ROLE, ds as ContractWrapper, e as AbiSchema, ah as ContractMetadata, dX as SplitsContractSchema, b0 as ContractAppURI, ai as ContractRoles, ag as ContractEncoder, aQ as GasCostEstimator, aR as ContractEvents, aS as ContractInterceptor, cG as resolveAddress, bc as fetchCurrencyValue, dt as buildTransactionFunction, aW as Transaction } from './contract-publisher-f8af509d.browser.esm.js';\nimport './QueryParams-39bcad7a.browser.esm.js';\nimport 'bn.js';\nimport 'zod';\nimport '@thirdweb-dev/storage';\nimport 'tiny-invariant';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport 'merkletreejs';\nimport 'fast-deep-equal';\nimport 'uuid';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC165.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedRevealDeprecated.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IThirdwebContract.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport '@thirdweb-dev/chains';\nimport 'bs58';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryLogic.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Permit.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721AQueryableUpgradeable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/SharedMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/zora_IERC721Drop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILoyaltyCard.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/INFTMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountFactory.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccount.json';\nimport 'ethers/lib/utils';\nimport '@thirdweb-dev/contracts-js/dist/abis/Forwarder.json';\nimport 'cross-fetch';\nimport '@thirdweb-dev/contracts-js/dist/abis/ContractPublisher.json';\nimport 'eventemitter3';\n\n/**\n * Create custom royalty splits to distribute funds.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"split\");\n * ```\n *\n * @public\n */\nclass Split {\n  static contractRoles = ADMIN_ROLE;\n\n  /**\n   * @internal\n   */\n\n  get chainId() {\n    return this._chainId;\n  }\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options, storage);\n    this._chainId = chainId;\n    this.abi = AbiSchema.parse(abi || []);\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.metadata = new ContractMetadata(this.contractWrapper, SplitsContractSchema, this.storage);\n    this.app = new ContractAppURI(this.contractWrapper, this.metadata, this.storage);\n    this.roles = new ContractRoles(this.contractWrapper, Split.contractRoles);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n  }\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get Recipients of this splits contract\n   *\n   * @remarks Get the data about the shares of every split recipient on the contract\n   *\n   * @example\n   * ```javascript\n   * const recipients = await contract.getAllRecipients();\n   * console.log(recipients);\n   * ```\n   */\n  async getAllRecipients() {\n    const recipients = [];\n    let index = BigNumber.from(0);\n    const totalRecipients = await this.contractWrapper.readContract.payeeCount();\n    while (index.lt(totalRecipients)) {\n      try {\n        const recipientAddress = await this.contractWrapper.readContract.payee(index);\n        recipients.push(await this.getRecipientSplitPercentage(recipientAddress));\n        index = index.add(1);\n      } catch (err) {\n        // The only way we know how to detect that we've found all recipients\n        // is if we get an error when trying to get the next recipient.\n        if (\"method\" in err && err[\"method\"].toLowerCase().includes(\"payee(uint256)\")) {\n          break;\n        } else {\n          throw err;\n        }\n      }\n    }\n    return recipients;\n  }\n\n  /**\n   * Returns all the recipients and their balances in the native currency.\n   *\n   * @returns A map of recipient addresses to their balances in the native currency.\n   */\n  async balanceOfAllRecipients() {\n    const recipients = await this.getAllRecipients();\n    const balances = {};\n    for (const recipient of recipients) {\n      balances[recipient.address] = await this.balanceOf(recipient.address);\n    }\n    return balances;\n  }\n\n  /**\n   * Returns all the recipients and their balances in a non-native currency.\n   *\n   * @param tokenAddress - The address of the currency to check the balances in.\n   * @returns A map of recipient addresses to their balances in the specified currency.\n   */\n  async balanceOfTokenAllRecipients(tokenAddress) {\n    const resolvedToken = await resolveAddress(tokenAddress);\n    const recipients = await this.getAllRecipients();\n    const balances = {};\n    for (const recipient of recipients) {\n      balances[recipient.address] = await this.balanceOfToken(recipient.address, resolvedToken);\n    }\n    return balances;\n  }\n\n  /**\n   * Get Funds owed to a particular wallet\n   *\n   * @remarks Get the amount of funds in the native currency held by the contract that is owed to a specific recipient.\n   *\n   * @example\n   * ```javascript\n   * // The address to check the funds of\n   * const address = \"{{wallet_address}}\";\n   * const funds = await contract.balanceOf(address);\n   * console.log(funds);\n   * ```\n   */\n  async balanceOf(address) {\n    const resolvedAddress = await resolveAddress(address);\n    const walletBalance = await this.contractWrapper.readContract.provider.getBalance(this.getAddress());\n    const totalReleased = await this.contractWrapper.readContract[\"totalReleased()\"]();\n    const totalReceived = walletBalance.add(totalReleased);\n    return this._pendingPayment(resolvedAddress, totalReceived, await this.contractWrapper.readContract[\"released(address)\"](resolvedAddress));\n  }\n\n  /**\n   * Get non-native Token Funds owed to a particular wallet\n   *\n   * @remarks Get the amount of funds in the non-native tokens held by the contract that is owed to a specific recipient.\n   *\n   * @example\n   * ```javascript\n   * // The address to check the funds of\n   * const address = \"{{wallet_address}}\";\n   * // The address of the currency to check the contracts funds of\n   * const tokenAddress = \"0x...\"\n   * const funds = await contract.balanceOfToken(address, tokenAddress);\n   * console.log(funds);\n   * ```\n   */\n  async balanceOfToken(walletAddress, tokenAddress) {\n    const resolvedToken = await resolveAddress(tokenAddress);\n    const resolvedWallet = await resolveAddress(walletAddress);\n    const erc20 = new Contract(resolvedToken, ERC20Abi, this.contractWrapper.getProvider());\n    const walletBalance = await erc20.balanceOf(this.getAddress());\n    const totalReleased = await this.contractWrapper.readContract[\"totalReleased(address)\"](resolvedToken);\n    const totalReceived = walletBalance.add(totalReleased);\n    const value = await this._pendingPayment(resolvedWallet, totalReceived, await this.contractWrapper.readContract[\"released(address,address)\"](resolvedToken, resolvedWallet));\n    return await fetchCurrencyValue(this.contractWrapper.getProvider(), resolvedToken, value);\n  }\n\n  /**\n   * Get the % of funds owed to a given address\n   * @param address - the address to check percentage of\n   */\n  async getRecipientSplitPercentage(address) {\n    const resolvedAddress = await resolveAddress(address);\n    const [totalShares, walletsShares] = await Promise.all([this.contractWrapper.readContract.totalShares(), this.contractWrapper.readContract.shares(address)]);\n    // We convert to basis points to avoid floating point loss of precision\n    return {\n      address: resolvedAddress,\n      splitPercentage: walletsShares.mul(BigNumber.from(1e7)).div(totalShares).toNumber() / 1e5\n    };\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Withdraw Funds\n   * @remarks Triggers a transfer to account of the amount of native currency they are owed.\n   *\n   * @example\n   * ```javascript\n   * // the wallet address that wants to withdraw their funds\n   * const walletAddress = \"{{wallet_address}}\"\n   * await contract.withdraw(walletAddress);\n   * ```\n   *\n   * @param walletAddress - The address to distributes the amount to\n   */\n  withdraw = /* @__PURE__ */buildTransactionFunction(async walletAddress => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"release(address)\",\n      args: [await resolveAddress(walletAddress)]\n    });\n  });\n\n  /**\n   * Triggers a transfer to account of the amount of a given currency they are owed.\n   *\n   * @param walletAddress - The address to distributes the amount to\n   * @param tokenAddress - The address of the currency contract to distribute funds\n   */\n  withdrawToken = /* @__PURE__ */buildTransactionFunction(async (walletAddress, tokenAddress) => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"release(address,address)\",\n      args: [await resolveAddress(tokenAddress), await resolveAddress(walletAddress)]\n    });\n  });\n\n  /**\n   * Distribute Funds\n   *\n   * @remarks Distribute funds held by the contract in the native currency to all recipients.\n   *\n   * @example\n   * ```javascript\n   * await contract.distribute();\n   * ```\n   */\n  distribute = /* @__PURE__ */buildTransactionFunction(async () => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"distribute()\",\n      args: []\n    });\n  });\n\n  /**\n   * Distribute Funds\n   *\n   * @remarks Distribute funds held by the contract in the native currency to all recipients.\n   *\n   * @example\n   * ```javascript\n   * // The address of the currency to distribute funds\n   * const tokenAddress = \"0x...\"\n   * await contract.distributeToken(tokenAddress);\n   * ```\n   *\n   * @param tokenAddress - The address of the currency contract to distribute funds\n   */\n  distributeToken = /* @__PURE__ */buildTransactionFunction(async tokenAddress => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"distribute(address)\",\n      args: [await resolveAddress(tokenAddress)]\n    });\n  });\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  async _pendingPayment(address, totalReceived, alreadyReleased) {\n    const addressReceived = totalReceived.mul(await this.contractWrapper.readContract.shares(await resolveAddress(address)));\n    const totalRoyaltyAvailable = addressReceived.div(await this.contractWrapper.readContract.totalShares());\n    return totalRoyaltyAvailable.sub(alreadyReleased);\n  }\n\n  /**\n   * @internal\n   */\n  async prepare(method, args, overrides) {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method,\n      args,\n      overrides\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName, args, overrides) {\n    return this.contractWrapper.call(functionName, args, overrides);\n  }\n}\n\nexport { Split };\n"],"names":["Split","chainId","this","_chainId","constructor","network","address","storage","_defineProperty","buildTransactionFunction","async","Transaction","fromContractWrapper","contractWrapper","method","args","resolveAddress","walletAddress","tokenAddress","options","arguments","length","undefined","abi","ContractWrapper","AbiSchema","parse","metadata","ContractMetadata","SplitsContractSchema","app","ContractAppURI","roles","ContractRoles","contractRoles","encoder","ContractEncoder","estimator","GasCostEstimator","events","ContractEvents","interceptor","ContractInterceptor","onNetworkUpdated","updateSignerOrProvider","getAddress","readContract","getAllRecipients","recipients","index","BigNumber","from","totalRecipients","payeeCount","lt","recipientAddress","payee","push","getRecipientSplitPercentage","add","err","toLowerCase","includes","balanceOfAllRecipients","balances","recipient","balanceOf","balanceOfTokenAllRecipients","resolvedToken","balanceOfToken","resolvedAddress","walletBalance","provider","getBalance","totalReleased","totalReceived","_pendingPayment","resolvedWallet","erc20","Contract","ERC20Abi","getProvider","value","fetchCurrencyValue","totalShares","walletsShares","Promise","all","shares","splitPercentage","mul","div","toNumber","alreadyReleased","sub","prepare","overrides","call","functionName","ADMIN_ROLE"],"sourceRoot":""}