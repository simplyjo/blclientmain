{"version":3,"file":"static/js/3704.beb13af9.chunk.js","mappings":"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","sources":["../node_modules/@thirdweb-dev/sdk/dist/erc-721-standard-7b47bd46.browser.esm.js","../node_modules/@thirdweb-dev/sdk/dist/signature-drop-d9bb4998.browser.esm.js","../node_modules/@thirdweb-dev/sdk/dist/thirdweb-checkout-39011b2a.browser.esm.js"],"sourcesContent":["import { aD as Erc721, cG as resolveAddress, dt as buildTransactionFunction, aW as Transaction } from './contract-publisher-f8af509d.browser.esm.js';\n\n/**\n * Standard ERC721 NFT functions\n * @remarks Basic functionality for a ERC721 contract that handles IPFS storage for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.nft.transfer(walletAddress, tokenId);\n * ```\n * @public\n */\nclass StandardErc721 {\n  get chainId() {\n    return this._chainId;\n  }\n  constructor(contractWrapper, storage, chainId) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.erc721 = new Erc721(this.contractWrapper, this.storage, chainId);\n    this._chainId = chainId;\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /**\n   * Get all NFTs\n   *\n   * @remarks Get all the data associated with every NFT in this contract.\n   *\n   * By default, returns the first 100 NFTs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const nfts = await contract.getAll();\n   * console.log(nfts);\n   * ```\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs queried.\n   */\n  async getAll(queryParams) {\n    return this.erc721.getAll(queryParams);\n  }\n\n  /**\n   * Get all NFTs owned by a specific wallet\n   *\n   * @remarks Get all the data associated with the NFTs owned by a specific wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to get the NFTs of\n   * const address = \"{{wallet_address}}\";\n   * const nfts = await contract.getOwned(address);\n   * console.log(nfts);\n   * ```\n   * @param walletAddress - the wallet address to query, defaults to the connected wallet\n   * @returns The NFT metadata for all NFTs in the contract.\n   */\n  async getOwned(walletAddress) {\n    if (walletAddress) {\n      walletAddress = await resolveAddress(walletAddress);\n    }\n    return this.erc721.getOwned(walletAddress);\n  }\n\n  /**\n   * Get Owned Token Ids\n   * @remarks Get all the token ids of NFTs owned by a specific wallet (no metadata)\n   */\n  async getOwnedTokenIds(walletAddress) {\n    if (walletAddress) {\n      walletAddress = await resolveAddress(walletAddress);\n    }\n    return this.erc721.getOwnedTokenIds(walletAddress);\n  }\n\n  /**\n   * Get total minted supply count\n   */\n  async totalSupply() {\n    return this.erc721.totalCirculatingSupply();\n  }\n\n  /**\n   * Get a single NFT\n   *\n   * @example\n   * ```javascript\n   * const tokenId = 0;\n   * const nft = await contract.get(tokenId);\n   * ```\n   * @param tokenId - the tokenId of the NFT to retrieve\n   * @returns The NFT metadata\n   */\n  async get(tokenId) {\n    return this.erc721.get(tokenId);\n  }\n\n  /**\n   * Get the current owner of a given NFT within this Contract\n   *\n   * @param tokenId - the tokenId of the NFT\n   * @returns the address of the owner\n   */\n  async ownerOf(tokenId) {\n    return this.erc721.ownerOf(tokenId);\n  }\n\n  /**\n   * Get NFT Balance\n   *\n   * @remarks Get a wallets NFT balance (number of NFTs in this contract owned by the wallet).\n   *\n   * @example\n   * ```javascript\n   * const walletAddress = \"{{wallet_address}}\";\n   * const balance = await contract.balanceOf(walletAddress);\n   * console.log(balance);\n   * ```\n   */\n  async balanceOf(address) {\n    return this.erc721.balanceOf(address);\n  }\n\n  /**\n   * Get NFT Balance for the currently connected wallet\n   */\n  async balance() {\n    return this.erc721.balance();\n  }\n\n  /**\n   * Get whether this wallet has approved transfers from the given operator\n   * @param address - the wallet address\n   * @param operator - the operator address\n   */\n  async isApproved(address, operator) {\n    return this.erc721.isApproved(address, operator);\n  }\n\n  /**\n   * Transfer an NFT\n   *\n   * @remarks Transfer an NFT from the connected wallet to another wallet.\n   *\n   * @example\n   * ```javascript\n   * const walletAddress = \"{{wallet_address}}\";\n   * const tokenId = 0;\n   * await contract.transfer(walletAddress, tokenId);\n   * ```\n   */\n  transfer = /* @__PURE__ */buildTransactionFunction(async (to, tokenId) => {\n    return this.erc721.transfer.prepare(to, tokenId);\n  });\n\n  /**\n   * Approve or remove operator as an operator for the caller. Operators can call transferFrom or safeTransferFrom for any token owned by the caller.\n   * @param operator - the operator's address\n   * @param approved - whether to approve or remove\n   *\n   * @internal\n   */\n  setApprovalForAll = /* @__PURE__ */buildTransactionFunction(async (operator, approved) => {\n    return this.erc721.setApprovalForAll.prepare(operator, approved);\n  });\n\n  /**\n   * Approve an operator for the NFT owner. Operators can call transferFrom or safeTransferFrom for the specified token.\n   * @param operator - the operator's address\n   * @param tokenId - the tokenId to give approval for\n   *\n   * @internal\n   */\n  setApprovalForToken = /* @__PURE__ */buildTransactionFunction(async (operator, tokenId) => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"approve\",\n      args: [await resolveAddress(operator), tokenId]\n    });\n  });\n}\n\nexport { StandardErc721 as S };\n","import { D as DEFAULT_QUERY_ALL_COUNT } from './QueryParams-39bcad7a.browser.esm.js';\nimport { dG as NFT_BASE_CONTRACT_ROLES, ds as ContractWrapper, e as AbiSchema, ah as ContractMetadata, dz as DropErc721ContractSchema, b0 as ContractAppURI, ai as ContractRoles, aj as ContractRoyalty, ak as ContractPrimarySale, ag as ContractEncoder, aQ as GasCostEstimator, aR as ContractEvents, aT as ContractPlatformFee, aS as ContractInterceptor, am as DropClaimConditions, aE as Erc721WithQuantitySignatureMintable, al as DelayedReveal, dS as FEATURE_NFT_REVEALABLE, aV as ContractOwner, bI as getRoleHash, dt as buildTransactionFunction, aW as Transaction } from './contract-publisher-f8af509d.browser.esm.js';\nimport { S as StandardErc721 } from './erc-721-standard-7b47bd46.browser.esm.js';\nimport { a as PaperCheckout } from './thirdweb-checkout-39011b2a.browser.esm.js';\nimport { BigNumber, constants } from 'ethers';\nimport 'bn.js';\nimport 'zod';\nimport '@thirdweb-dev/storage';\nimport 'tiny-invariant';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport 'merkletreejs';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport 'fast-deep-equal';\nimport 'uuid';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC165.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedRevealDeprecated.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IThirdwebContract.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport '@thirdweb-dev/chains';\nimport 'bs58';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryLogic.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Permit.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721AQueryableUpgradeable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/SharedMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/zora_IERC721Drop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILoyaltyCard.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/INFTMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountFactory.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccount.json';\nimport 'ethers/lib/utils';\nimport '@thirdweb-dev/contracts-js/dist/abis/Forwarder.json';\nimport 'cross-fetch';\nimport '@thirdweb-dev/contracts-js/dist/abis/ContractPublisher.json';\nimport 'eventemitter3';\n\n/**\n * Setup a collection of NFTs where when it comes to minting, you can authorize\n * some external party to mint tokens on your contract, and specify what exactly\n * will be minted by that external party..\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"signature-drop\");\n * ```\n *\n * @public\n */\nclass SignatureDrop extends StandardErc721 {\n  static contractRoles = NFT_BASE_CONTRACT_ROLES;\n\n  /**\n   * @internal\n   */\n\n  /**\n   * Configure royalties\n   * @remarks Set your own royalties for the entire contract or per token\n   * @example\n   * ```javascript\n   * // royalties on the whole contract\n   * contract.royalties.setDefaultRoyaltyInfo({\n   *   seller_fee_basis_points: 100, // 1%\n   *   fee_recipient: \"0x...\"\n   * });\n   * // override royalty for a particular token\n   * contract.royalties.setTokenRoyaltyInfo(tokenId, {\n   *   seller_fee_basis_points: 500, // 5%\n   *   fee_recipient: \"0x...\"\n   * });\n   * ```\n   */\n\n  /**\n   * Configure claim conditions\n   * @remarks Define who can claim NFTs in the collection, when and how many.\n   * @example\n   * ```javascript\n   * const presaleStartTime = new Date();\n   * const claimCondition = {\n   *     startTime: presaleStartTime, // start the presale now\n   *     maxClaimableSupply: 2, // limit how many mints for this presale\n   *     price: 0.01, // presale price\n   *     snapshot: ['0x...', '0x...'], // limit minting to only certain addresses\n   * };\n   * await contract.claimConditions.set([claimCondition]);\n   * ```\n   */\n\n  /**\n   * Delayed reveal\n   * @remarks Create a batch of encrypted NFTs that can be revealed at a later time.\n   * @example\n   * ```javascript\n   * // the real NFTs, these will be encrypted until you reveal them\n   * const realNFTs = [{\n   *   name: \"Common NFT #1\",\n   *   description: \"Common NFT, one of many.\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }, {\n   *   name: \"Super Rare NFT #2\",\n   *   description: \"You got a Super Rare NFT!\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }];\n   * // A placeholder NFT that people will get immediately in their wallet, and will be converted to the real NFT at reveal time\n   * const placeholderNFT = {\n   *   name: \"Hidden NFT\",\n   *   description: \"Will be revealed next week!\"\n   * };\n   * // Create and encrypt the NFTs\n   * await contract.revealer.createDelayedRevealBatch(\n   *   placeholderNFT,\n   *   realNFTs,\n   *   \"my secret password\",\n   * );\n   * // Whenever you're ready, reveal your NFTs at any time\n   * const batchId = 0; // the batch to reveal\n   * await contract.revealer.reveal(batchId, \"my secret password\");\n   * ```\n   */\n\n  /**\n   * Signature Minting\n   * @remarks Generate dynamic NFTs with your own signature, and let others mint them using that signature.\n   * @example\n   * ```javascript\n   * // see how to craft a payload to sign in the `contract.signature.generate()` documentation\n   * const signedPayload = contract.signature.generate(payload);\n   *\n   * // now anyone can mint the NFT\n   * const tx = contract.signature.mint(signedPayload);\n   * const receipt = tx.receipt; // the mint transaction receipt\n   * const mintedId = tx.id; // the id of the NFT minted\n   * ```\n   */\n\n  /**\n   * Checkout\n   * @remarks Create a FIAT currency checkout for your NFT drop.\n   */\n\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options, storage);\n    super(contractWrapper, storage, chainId);\n    this.abi = AbiSchema.parse(abi || []);\n    this.metadata = new ContractMetadata(this.contractWrapper, DropErc721ContractSchema, this.storage);\n    this.app = new ContractAppURI(this.contractWrapper, this.metadata, this.storage);\n    this.roles = new ContractRoles(this.contractWrapper, SignatureDrop.contractRoles);\n    this.royalties = new ContractRoyalty(this.contractWrapper, this.metadata);\n    this.sales = new ContractPrimarySale(this.contractWrapper);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.platformFees = new ContractPlatformFee(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.claimConditions = new DropClaimConditions(this.contractWrapper, this.metadata, this.storage);\n    this.signature = new Erc721WithQuantitySignatureMintable(this.contractWrapper, this.storage);\n    this.revealer = new DelayedReveal(this.contractWrapper, this.storage, FEATURE_NFT_REVEALABLE.name, () => this.erc721.nextTokenIdToMint());\n    this.signature = new Erc721WithQuantitySignatureMintable(this.contractWrapper, this.storage);\n    this.owner = new ContractOwner(this.contractWrapper);\n    this.checkout = new PaperCheckout(this.contractWrapper);\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get the total count NFTs in this drop contract, both claimed and unclaimed\n   */\n  async totalSupply() {\n    const claimed = await this.totalClaimedSupply();\n    const unclaimed = await this.totalUnclaimedSupply();\n    return claimed.add(unclaimed);\n  }\n\n  /**\n   * Get All Claimed NFTs\n   *\n   * @remarks Fetch all the NFTs (and their owners) that have been claimed in this Drop.\n   *\n   * * @example\n   * ```javascript\n   * const claimedNFTs = await contract.getAllClaimed();\n   * const firstOwner = claimedNFTs[0].owner;\n   * ```\n   *\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata and their ownersfor all NFTs queried.\n   */\n  async getAllClaimed(queryParams) {\n    const start = BigNumber.from(queryParams?.start || 0).toNumber();\n    const count = BigNumber.from(queryParams?.count || DEFAULT_QUERY_ALL_COUNT).toNumber();\n    const maxId = Math.min((await this.totalClaimedSupply()).toNumber(), start + count);\n    return await Promise.all(Array.from(Array(maxId).keys()).map(i => this.get(i.toString())));\n  }\n\n  /**\n   * Get All Unclaimed NFTs\n   *\n   * @remarks Fetch all the NFTs that have been not been claimed yet in this Drop.\n   *\n   * * @example\n   * ```javascript\n   * const unclaimedNFTs = await contract.getAllUnclaimed();\n   * const firstUnclaimedNFT = unclaimedNFTs[0].name;\n   * ```\n   *\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs queried.\n   */\n  async getAllUnclaimed(queryParams) {\n    const start = BigNumber.from(queryParams?.start || 0).toNumber();\n    const count = BigNumber.from(queryParams?.count || DEFAULT_QUERY_ALL_COUNT).toNumber();\n    const firstTokenId = BigNumber.from(Math.max((await this.totalClaimedSupply()).toNumber(), start));\n    const maxId = BigNumber.from(Math.min((await this.contractWrapper.readContract.nextTokenIdToMint()).toNumber(), firstTokenId.toNumber() + count));\n    return await Promise.all(Array.from(Array(maxId.sub(firstTokenId).toNumber()).keys()).map(i => this.erc721.getTokenMetadata(firstTokenId.add(i).toString())));\n  }\n\n  /**\n   * Get the claimed supply\n   *\n   * @remarks Get the number of claimed NFTs in this Drop.\n   *\n   * * @example\n   * ```javascript\n   * const claimedNFTCount = await contract.totalClaimedSupply();\n   * console.log(`NFTs claimed so far: ${claimedNFTCount}`);\n   * ```\n   * @returns the claimed supply\n   */\n  async totalClaimedSupply() {\n    return this.erc721.totalClaimedSupply();\n  }\n\n  /**\n   * Get the unclaimed supply\n   *\n   * @remarks Get the number of unclaimed NFTs in this Drop.\n   *\n   * * @example\n   * ```javascript\n   * const unclaimedNFTCount = await contract.totalUnclaimedSupply();\n   * console.log(`NFTs left to claim: ${unclaimedNFTCount}`);\n   * ```\n   * @returns the unclaimed supply\n   */\n  async totalUnclaimedSupply() {\n    return this.erc721.totalUnclaimedSupply();\n  }\n\n  /**\n   * Get whether users can transfer NFTs from this contract\n   */\n  async isTransferRestricted() {\n    const anyoneCanTransfer = await this.contractWrapper.readContract.hasRole(getRoleHash(\"transfer\"), constants.AddressZero);\n    return !anyoneCanTransfer;\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Create a batch of unique NFTs to be claimed in the future\n   *\n   * @remarks Create batch allows you to create a batch of many unique NFTs in one transaction.\n   *\n   * @example\n   * ```javascript\n   * // Custom metadata of the NFTs to create\n   * const metadatas = [{\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }, {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }];\n   *\n   * const results = await contract.createBatch(metadatas); // uploads and creates the NFTs on chain\n   * const firstTokenId = results[0].id; // token id of the first created NFT\n   * const firstNFT = await results[0].data(); // (optional) fetch details of the first created NFT\n   * ```\n   *\n   * @param metadatas - The metadata to include in the batch.\n   * @param options - optional upload progress callback\n   */\n  createBatch = /* @__PURE__ */buildTransactionFunction(async (metadatas, options) => {\n    return this.erc721.lazyMint.prepare(metadatas, options);\n  });\n\n  /**\n   * Construct a claim transaction without executing it.\n   * This is useful for estimating the gas cost of a claim transaction, overriding transaction options and having fine grained control over the transaction execution.\n   * @param destinationAddress\n   * @param quantity\n   * @param checkERC20Allowance\n   *\n   * @deprecated Use `contract.erc721.claim.prepare(...args)` instead\n   */\n  async getClaimTransaction(destinationAddress, quantity, options) {\n    return this.erc721.getClaimTransaction(destinationAddress, quantity, options);\n  }\n\n  /**\n   * Claim unique NFTs to a specific Wallet\n   *\n   * @remarks Let the specified wallet claim NFTs.\n   *\n   * @example\n   * ```javascript\n   * const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\n   * const quantity = 1; // how many unique NFTs you want to claim\n   *\n   * const tx = await contract.claimTo(address, quantity);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const claimedTokenId = tx.id; // the id of the NFT claimed\n   * const claimedNFT = await tx.data(); // (optional) get the claimed NFT metadata\n   * ```\n   *\n   * @param destinationAddress - Address you want to send the token to\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param checkERC20Allowance - Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer\n   *\n   * @returns - an array of results containing the id of the token claimed, the transaction receipt and a promise to optionally fetch the nft metadata\n   */\n  claimTo = /* @__PURE__ */buildTransactionFunction(async (destinationAddress, quantity, options) => {\n    return this.erc721.claimTo.prepare(destinationAddress, quantity, options);\n  });\n\n  /**\n   * Claim NFTs to the connected wallet.\n   *\n   * @remarks See {@link NFTDrop.claimTo}\n   *\n   * @returns - an array of results containing the id of the token claimed, the transaction receipt and a promise to optionally fetch the nft metadata\n   */\n  claim = /* @__PURE__ */buildTransactionFunction(async (quantity, options) => {\n    return this.erc721.claim.prepare(quantity, options);\n  });\n\n  /**\n   * Burn a single NFT\n   * @param tokenId - the token Id to burn\n   * @example\n   * ```javascript\n   * const result = await contract.burnToken(tokenId);\n   * ```\n   */\n  burn = /* @__PURE__ */buildTransactionFunction(async tokenId => {\n    return this.erc721.burn.prepare(tokenId);\n  });\n\n  /**\n   * @internal\n   */\n  async prepare(method, args, overrides) {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method,\n      args,\n      overrides\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName, args, overrides) {\n    return this.contractWrapper.call(functionName, args, overrides);\n  }\n}\n\nexport { SignatureDrop };\n","import { cM as ChainId } from './contract-publisher-f8af509d.browser.esm.js';\nimport invariant from 'tiny-invariant';\n\nconst PAPER_API_BASE = `https://paper.xyz/api`;\nconst PAPER_API_VERSION = `2022-08-12`;\n\n/**\n * @internal\n */\nconst PAPER_API_URL = `${PAPER_API_BASE}/${PAPER_API_VERSION}/platform/thirdweb`;\nconst PAPER_CHAIN_ID_MAP = {\n  [ChainId.Mainnet]: \"Ethereum\",\n  [ChainId.Goerli]: \"Goerli\",\n  [ChainId.Polygon]: \"Polygon\",\n  [ChainId.Mumbai]: \"Mumbai\",\n  [ChainId.Avalanche]: \"Avalanche\"\n};\n\n/**\n * @internal\n */\nfunction parseChainIdToPaperChain(chainId) {\n  invariant(chainId in PAPER_CHAIN_ID_MAP, `chainId not supported by paper: ${chainId}`);\n  return PAPER_CHAIN_ID_MAP[chainId];\n}\n/**\n *\n * @param contractAddress\n * @param chainId\n * @internal\n * @returns the paper xyz contract id\n * @throws if the contract is not registered on paper xyz\n */\nasync function fetchRegisteredCheckoutId(contractAddress, chainId) {\n  const paperChain = parseChainIdToPaperChain(chainId);\n  const res = await fetch(`${PAPER_API_URL}/register-contract?contractAddress=${contractAddress}&chain=${paperChain}`);\n  const json = await res.json();\n  invariant(json.result.id, \"Contract is not registered with paper\");\n  return json.result.id;\n}\n\n/**\n * The parameters for creating a paper.xyz checkout link.\n * @public\n */\n\n/**\n * @internal\n */\n\n/**\n * @internal\n */\n\nconst DEFAULT_PARAMS = {\n  expiresInMinutes: 15,\n  feeBearer: \"BUYER\",\n  sendEmailOnSuccess: true,\n  redirectAfterPayment: false\n};\n\n/**\n * @internal\n */\nasync function createCheckoutLinkIntent(contractId, params) {\n  const res = await fetch(`${PAPER_API_URL}/checkout-link-intent`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      contractId,\n      ...DEFAULT_PARAMS,\n      ...params,\n      metadata: {\n        ...params.metadata,\n        via_platform: \"thirdweb\"\n      },\n      // overrides that are hard coded\n      hideNativeMint: true,\n      hidePaperWallet: !!params.walletAddress,\n      hideExternalWallet: true,\n      hidePayWithCrypto: true,\n      usePaperKey: false\n    })\n  });\n  const json = await res.json();\n  invariant(json.checkoutLinkIntentUrl, \"Failed to create checkout link intent\");\n  return json.checkoutLinkIntentUrl;\n}\n\n/**\n * @internal\n */\nclass PaperCheckout {\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n  async getCheckoutId() {\n    return fetchRegisteredCheckoutId(this.contractWrapper.address, await this.contractWrapper.getChainID());\n  }\n  async isEnabled() {\n    try {\n      return !!(await this.getCheckoutId());\n    } catch (err) {\n      return false;\n    }\n  }\n  async createLinkIntent(params) {\n    return await createCheckoutLinkIntent(await this.getCheckoutId(), params);\n  }\n}\n\nexport { PAPER_API_URL as P, PaperCheckout as a, createCheckoutLinkIntent as c, fetchRegisteredCheckoutId as f, parseChainIdToPaperChain as p };\n"],"names":["StandardErc721","chainId","this","_chainId","constructor","contractWrapper","storage","_defineProperty","buildTransactionFunction","async","to","tokenId","erc721","transfer","prepare","operator","approved","setApprovalForAll","Transaction","fromContractWrapper","method","args","resolveAddress","Erc721","onNetworkUpdated","network","updateSignerOrProvider","getAddress","readContract","address","getAll","queryParams","getOwned","walletAddress","getOwnedTokenIds","totalSupply","totalCirculatingSupply","get","ownerOf","balanceOf","balance","isApproved","SignatureDrop","options","arguments","length","undefined","abi","super","ContractWrapper","metadatas","lazyMint","destinationAddress","quantity","claimTo","claim","burn","AbiSchema","parse","metadata","ContractMetadata","DropErc721ContractSchema","app","ContractAppURI","roles","ContractRoles","contractRoles","royalties","ContractRoyalty","sales","ContractPrimarySale","encoder","ContractEncoder","estimator","GasCostEstimator","events","ContractEvents","platformFees","ContractPlatformFee","interceptor","ContractInterceptor","claimConditions","DropClaimConditions","signature","Erc721WithQuantitySignatureMintable","revealer","DelayedReveal","FEATURE_NFT_REVEALABLE","name","nextTokenIdToMint","owner","ContractOwner","checkout","PaperCheckout","claimed","totalClaimedSupply","unclaimed","totalUnclaimedSupply","add","getAllClaimed","start","BigNumber","from","toNumber","count","DEFAULT_QUERY_ALL_COUNT","maxId","Math","min","Promise","all","Array","keys","map","i","toString","getAllUnclaimed","firstTokenId","max","sub","getTokenMetadata","isTransferRestricted","hasRole","getRoleHash","constants","getClaimTransaction","overrides","call","functionName","NFT_BASE_CONTRACT_ROLES","PAPER_API_URL","concat","PAPER_CHAIN_ID_MAP","ChainId","Mainnet","Goerli","Polygon","Mumbai","Avalanche","fetchRegisteredCheckoutId","contractAddress","paperChain","invariant","parseChainIdToPaperChain","res","fetch","json","result","id","DEFAULT_PARAMS","expiresInMinutes","feeBearer","sendEmailOnSuccess","redirectAfterPayment","getCheckoutId","getChainID","isEnabled","err","createLinkIntent","params","contractId","headers","body","JSON","stringify","via_platform","hideNativeMint","hidePaperWallet","hideExternalWallet","hidePayWithCrypto","usePaperKey","checkoutLinkIntentUrl","createCheckoutLinkIntent"],"sourceRoot":""}