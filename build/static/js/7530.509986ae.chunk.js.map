{"version":3,"file":"static/js/7530.509986ae.chunk.js","mappings":"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","sources":["../node_modules/@thirdweb-dev/sdk/dist/erc-20-standard-6c29d88d.browser.esm.js","../node_modules/@thirdweb-dev/sdk/dist/erc-20-history-7a76e846.browser.esm.js","../node_modules/@thirdweb-dev/sdk/dist/token-a8af2565.browser.esm.js"],"sourcesContent":["import { au as Erc20, dt as buildTransactionFunction } from './contract-publisher-f8af509d.browser.esm.js';\n\n/**\n * Standard ERC20 Token functions\n * @remarks Basic functionality for a ERC20 contract that handles all unit transformation for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.token.transfer(walletAddress, amount);\n * ```\n * @public\n */\nclass StandardErc20 {\n  get chainId() {\n    return this._chainId;\n  }\n  constructor(contractWrapper, storage, chainId) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.erc20 = new Erc20(this.contractWrapper, this.storage, chainId);\n    this._chainId = chainId;\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n\n  /**\n   * @internal\n   */\n  getAddress() {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get the token Metadata (name, symbol, etc...)\n   *\n   * @example\n   * ```javascript\n   * const token = await contract.get();\n   * ```\n   * @returns The token metadata\n   */\n  async get() {\n    return this.erc20.get();\n  }\n\n  /**\n   * Get Token Balance for the currently connected wallet\n   *\n   * @remarks Get a wallets token balance.\n   *\n   * @example\n   * ```javascript\n   * const balance = await contract.balance();\n   * ```\n   *\n   * @returns The balance of a specific wallet.\n   */\n  async balance() {\n    return await this.erc20.balance();\n  }\n\n  /**\n   * Get Token Balance\n   *\n   * @remarks Get a wallets token balance.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to check token balance\n   * const walletAddress = \"{{wallet_address}}\";\n   * const balance = await contract.balanceOf(walletAddress);\n   * ```\n   *\n   * @returns The balance of a specific wallet.\n   */\n  async balanceOf(address) {\n    return this.erc20.balanceOf(address);\n  }\n\n  /**\n   * The total supply for this token\n   * @remarks Get how much supply has been minted\n   * @example\n   * ```javascript\n   * const balance = await contract.totalSupply();\n   * ```\n   */\n  async totalSupply() {\n    return await this.erc20.totalSupply();\n  }\n\n  /**\n   * Get Token Allowance\n   *\n   * @remarks Get the allowance of a 'spender' wallet over the connected wallet's funds - the allowance of a different address for a token is the amount of tokens that the `spender` wallet is allowed to spend on behalf of the connected wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to check token allowance\n   * const spenderAddress = \"0x...\";\n   * const allowance = await contract.allowance(spenderAddress);\n   * ```\n   *\n   * @returns The allowance of one wallet over anothers funds.\n   */\n  async allowance(spender) {\n    return await this.erc20.allowance(spender);\n  }\n\n  /**\n   * Get Token Allowance\n   *\n   * @remarks Get the allowance of one wallet over another wallet's funds - the allowance of a different address for a token is the amount of tokens that the wallet is allowed to spend on behalf of the specified wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet who owns the funds\n   * const owner = \"{{wallet_address}}\";\n   * // Address of the wallet to check token allowance\n   * const spender = \"0x...\";\n   * const allowance = await contract.allowanceOf(owner, spender);\n   * ```\n   *\n   * @returns The allowance of one wallet over anothers funds.\n   */\n  async allowanceOf(owner, spender) {\n    return await this.erc20.allowanceOf(owner, spender);\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Transfer Tokens\n   *\n   * @remarks Transfer tokens from the connected wallet to another wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to send the tokens to\n   * const toAddress = \"0x...\";\n   * // The amount of tokens you want to send\n   * const amount = 0.1;\n   * await contract.transfer(toAddress, amount);\n   * ```\n   */\n  transfer = /* @__PURE__ */buildTransactionFunction(async (to, amount) => {\n    return this.erc20.transfer.prepare(to, amount);\n  });\n\n  /**\n   * Transfer Tokens From Address\n   *\n   * @remarks Transfer tokens from one wallet to another\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet sending the tokens\n   * const fromAddress = \"{{wallet_address}}\";\n   * // Address of the wallet you want to send the tokens to\n   * const toAddress = \"0x...\";\n   * // The number of tokens you want to send\n   * const amount = 1.2\n   * // Note that the connected wallet must have approval to transfer the tokens of the fromAddress\n   * await contract.transferFrom(fromAddress, toAddress, amount);\n   * ```\n   */\n  transferFrom = /* @__PURE__ */buildTransactionFunction(async (from, to, amount) => {\n    return this.erc20.transferFrom.prepare(from, to, amount);\n  });\n\n  /**\n   * Allows the specified `spender` wallet to transfer the given `amount` of tokens to another wallet\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to allow transfers from\n   * const spenderAddress = \"0x...\";\n   * // The number of tokens to give as allowance\n   * const amount = 100\n   * await contract.setAllowance(spenderAddress, amount);\n   * ```\n   */\n  setAllowance = /* @__PURE__ */buildTransactionFunction(async (spender, amount) => {\n    return this.erc20.setAllowance.prepare(spender, amount);\n  });\n\n  /**\n   * Transfer Tokens To Many Wallets\n   *\n   * @remarks Mint tokens from the connected wallet to many wallets\n   *\n   * @example\n   * ```javascript\n   * // Data of the tokens you want to mint\n   * const data = [\n   *   {\n   *     toAddress: \"{{wallet_address}}\", // Address to mint tokens to\n   *     amount: 100, // How many tokens to mint to specified address\n   *   },\n   *  {\n   *    toAddress: \"0x...\",\n   *    amount: 100,\n   *  }\n   * ]\n   *\n   * await contract.transferBatch(data);\n   * ```\n   */\n  transferBatch = /* @__PURE__ */buildTransactionFunction(async args => {\n    return this.erc20.transferBatch.prepare(args);\n  });\n}\n\nexport { StandardErc20 as S };\n","import { bc as fetchCurrencyValue } from './contract-publisher-f8af509d.browser.esm.js';\nimport { constants, BigNumber } from 'ethers';\n\n/**\n * Manages history for Token contracts\n * @public\n */\nclass TokenERC20History {\n  constructor(contractWrapper, events) {\n    this.contractWrapper = contractWrapper;\n    this.events = events;\n  }\n\n  /**\n   * Get all holder balances\n   *\n   * @remarks Lets you get all token holders and their corresponding balances\n   * @returns - A JSON object of all token holders and their corresponding balances\n   * @example\n   * ```javascript\n   * const allHolderBalances = await contract.history.getAllHolderBalances();\n   * ```\n   */\n  async getAllHolderBalances() {\n    const a = await this.events.getEvents(\"Transfer\");\n    const txns = a.map(b => b.data);\n    const balances = {};\n    txns.forEach(item => {\n      const from = item?.from;\n      const to = item?.to;\n      const amount = item?.value;\n      if (!(from === constants.AddressZero)) {\n        if (!(from in balances)) {\n          balances[from] = BigNumber.from(0);\n        }\n        balances[from] = balances[from].sub(amount);\n      }\n      if (!(to === constants.AddressZero)) {\n        if (!(to in balances)) {\n          balances[to] = BigNumber.from(0);\n        }\n        balances[to] = balances[to].add(amount);\n      }\n    });\n    return Promise.all(Object.keys(balances).map(async addr => ({\n      holder: addr,\n      balance: await fetchCurrencyValue(this.contractWrapper.getProvider(), this.contractWrapper.readContract.address, balances[addr])\n    })));\n  }\n}\n\nexport { TokenERC20History as T };\n","import { dG as NFT_BASE_CONTRACT_ROLES, ds as ContractWrapper, e as AbiSchema, ah as ContractMetadata, d_ as TokenErc20ContractSchema, b0 as ContractAppURI, ai as ContractRoles, ak as ContractPrimarySale, aR as ContractEvents, ag as ContractEncoder, aQ as GasCostEstimator, aT as ContractPlatformFee, aS as ContractInterceptor, at as Erc20SignatureMintable, cG as resolveAddress, bI as getRoleHash, dt as buildTransactionFunction, aW as Transaction } from './contract-publisher-f8af509d.browser.esm.js';\nimport { T as TokenERC20History } from './erc-20-history-7a76e846.browser.esm.js';\nimport { S as StandardErc20 } from './erc-20-standard-6c29d88d.browser.esm.js';\nimport { constants } from 'ethers';\nimport './QueryParams-39bcad7a.browser.esm.js';\nimport 'bn.js';\nimport 'zod';\nimport '@thirdweb-dev/storage';\nimport 'tiny-invariant';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport 'merkletreejs';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport 'fast-deep-equal';\nimport 'uuid';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC165.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedRevealDeprecated.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IThirdwebContract.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport '@thirdweb-dev/chains';\nimport 'bs58';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryLogic.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Permit.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721AQueryableUpgradeable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/SharedMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/zora_IERC721Drop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILoyaltyCard.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/INFTMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountFactory.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccount.json';\nimport 'ethers/lib/utils';\nimport '@thirdweb-dev/contracts-js/dist/abis/Forwarder.json';\nimport 'cross-fetch';\nimport '@thirdweb-dev/contracts-js/dist/abis/ContractPublisher.json';\nimport 'eventemitter3';\n\n/**\n * Create a standard crypto token or cryptocurrency.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"token\");\n * ```\n *\n * @public\n */\nclass Token extends StandardErc20 {\n  static contractRoles = NFT_BASE_CONTRACT_ROLES;\n\n  /**\n   * Signature Minting\n   * @remarks Generate tokens that can be minted only with your own signature, attaching your own set of mint conditions.\n   * @example\n   * ```javascript\n   * // see how to craft a payload to sign in the `contract.signature.generate()` documentation\n   * const signedPayload = contract.signature.generate(payload);\n   *\n   * // now anyone can mint the tokens\n   * const tx = contract.signature.mint(signedPayload);\n   * const receipt = tx.receipt; // the mint transaction receipt\n   * ```\n   */\n\n  /**\n   * @internal\n   */\n\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options, storage);\n    super(contractWrapper, storage, chainId);\n    this.abi = AbiSchema.parse(abi || []);\n    this.metadata = new ContractMetadata(this.contractWrapper, TokenErc20ContractSchema, this.storage);\n    this.app = new ContractAppURI(this.contractWrapper, this.metadata, this.storage);\n    this.roles = new ContractRoles(this.contractWrapper, Token.contractRoles);\n    this.sales = new ContractPrimarySale(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.history = new TokenERC20History(this.contractWrapper, this.events);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.platformFees = new ContractPlatformFee(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.signature = new Erc20SignatureMintable(this.contractWrapper, this.roles);\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get your wallet voting power for the current checkpoints\n   *\n   * @returns the amount of voting power in tokens\n   */\n  async getVoteBalance() {\n    return await this.getVoteBalanceOf(await this.contractWrapper.getSignerAddress());\n  }\n  async getVoteBalanceOf(account) {\n    return await this.erc20.getValue(await this.contractWrapper.readContract.getVotes(account));\n  }\n\n  /**\n   * Get your voting delegatee address\n   *\n   * @returns the address of your vote delegatee\n   */\n  async getDelegation() {\n    return await this.getDelegationOf(await this.contractWrapper.getSignerAddress());\n  }\n\n  /**\n   * Get a specific address voting delegatee address\n   *\n   * @returns the address of your vote delegatee\n   */\n  async getDelegationOf(account) {\n    return await this.contractWrapper.readContract.delegates(await resolveAddress(account));\n  }\n\n  /**\n   * Get whether users can transfer tokens from this contract\n   */\n  async isTransferRestricted() {\n    const anyoneCanTransfer = await this.contractWrapper.readContract.hasRole(getRoleHash(\"transfer\"), constants.AddressZero);\n    return !anyoneCanTransfer;\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Mint Tokens for the connected wallet\n   *\n   * @remarks See {@link Token.mintTo}\n   */\n  mint = /* @__PURE__ */buildTransactionFunction(async amount => {\n    return this.erc20.mint.prepare(amount);\n  });\n\n  /**\n   * Mint Tokens\n   *\n   * @remarks Mint tokens to a specified address.\n   *\n   * @example\n   * ```javascript\n   * const toAddress = \"{{wallet_address}}\"; // Address of the wallet you want to mint the tokens to\n   * const amount = \"1.5\"; // The amount of this token you want to mint\n   *\n   * await contract.mintTo(toAddress, amount);\n   * ```\n   */\n  mintTo = /* @__PURE__ */buildTransactionFunction(async (to, amount) => {\n    return this.erc20.mintTo.prepare(to, amount);\n  });\n\n  /**\n   * Construct a mint transaction without executing it.\n   * This is useful for estimating the gas cost of a mint transaction, overriding transaction options and having fine grained control over the transaction execution.\n   * @param receiver - Address you want to send the token to\n   * @param amount - The amount of tokens you want to mint\n   *\n   * @deprecated Use `contract.mint.prepare(...args)` instead\n   */\n  async getMintTransaction(to, amount) {\n    return this.erc20.getMintTransaction(to, amount);\n  }\n\n  /**\n   * Mint Tokens To Many Wallets\n   *\n   * @remarks Mint tokens to many wallets in one transaction.\n   *\n   * @example\n   * ```javascript\n   * // Data of the tokens you want to mint\n   * const data = [\n   *   {\n   *     toAddress: \"{{wallet_address}}\", // Address to mint tokens to\n   *     amount: 0.2, // How many tokens to mint to specified address\n   *   },\n   *  {\n   *    toAddress: \"0x...\",\n   *    amount: 1.4,\n   *  }\n   * ]\n   *\n   * await contract.mintBatchTo(data);\n   * ```\n   */\n  mintBatchTo = /* @__PURE__ */buildTransactionFunction(async args => {\n    return this.erc20.mintBatchTo.prepare(args);\n  });\n\n  /**\n   * Lets you delegate your voting power to the delegateeAddress\n   *\n   * @param delegateeAddress - delegatee wallet address\n   * @alpha\n   */\n  delegateTo = /* @__PURE__ */buildTransactionFunction(async delegateeAddress => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"delegate\",\n      args: [await resolveAddress(delegateeAddress)]\n    });\n  });\n\n  /**\n   * Burn Tokens\n   *\n   * @remarks Burn tokens held by the connected wallet\n   *\n   * @example\n   * ```javascript\n   * // The amount of this token you want to burn\n   * const amount = 1.2;\n   *\n   * await contract.burnTokens(amount);\n   * ```\n   */\n  burn = /* @__PURE__ */buildTransactionFunction(amount => {\n    return this.erc20.burn.prepare(amount);\n  });\n\n  /**\n   * Burn Tokens\n   *\n   * @remarks Burn tokens held by the specified wallet\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet sending the tokens\n   * const holderAddress = \"{{wallet_address}}\";\n   *\n   * // The amount of this token you want to burn\n   * const amount = 1.2;\n   *\n   * await contract.burnFrom(holderAddress, amount);\n   * ```\n   */\n  burnFrom = /* @__PURE__ */buildTransactionFunction(async (holder, amount) => {\n    return this.erc20.burnFrom.prepare(holder, amount);\n  });\n\n  /**\n   * @internal\n   */\n  async prepare(method, args, overrides) {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method,\n      args,\n      overrides\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName, args, overrides) {\n    return this.contractWrapper.call(functionName, args, overrides);\n  }\n}\n\nexport { Token };\n"],"names":["StandardErc20","chainId","this","_chainId","constructor","contractWrapper","storage","_defineProperty","buildTransactionFunction","async","to","amount","erc20","transfer","prepare","from","transferFrom","spender","setAllowance","transferBatch","args","Erc20","onNetworkUpdated","network","updateSignerOrProvider","getAddress","readContract","address","get","balance","balanceOf","totalSupply","allowance","allowanceOf","owner","TokenERC20History","events","getAllHolderBalances","txns","getEvents","map","b","data","balances","forEach","item","value","constants","BigNumber","sub","add","Promise","all","Object","keys","holder","addr","fetchCurrencyValue","getProvider","Token","options","arguments","length","undefined","abi","super","ContractWrapper","mint","mintTo","mintBatchTo","Transaction","fromContractWrapper","method","resolveAddress","delegateeAddress","burn","burnFrom","AbiSchema","parse","metadata","ContractMetadata","TokenErc20ContractSchema","app","ContractAppURI","roles","ContractRoles","contractRoles","sales","ContractPrimarySale","ContractEvents","history","encoder","ContractEncoder","estimator","GasCostEstimator","platformFees","ContractPlatformFee","interceptor","ContractInterceptor","signature","Erc20SignatureMintable","getVoteBalance","getVoteBalanceOf","getSignerAddress","account","getValue","getVotes","getDelegation","getDelegationOf","delegates","isTransferRestricted","hasRole","getRoleHash","getMintTransaction","overrides","call","functionName","NFT_BASE_CONTRACT_ROLES"],"sourceRoot":""}